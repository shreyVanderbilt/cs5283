# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HealthAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CONTENT(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CONTENT()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCONTENT(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CONTENT
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CONTENT
    def Dispenser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CONTENT
    def Icemaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTENT
    def Lightbulb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CONTENT
    def FridgeTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 32

    # CONTENT
    def FreezeTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTENT
    def SensorStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(6)
def CONTENTStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddDispenser(builder, dispenser): builder.PrependInt8Slot(0, dispenser, 0)
def CONTENTAddDispenser(builder, dispenser):
    """This method is deprecated. Please switch to AddDispenser."""
    return AddDispenser(builder, dispenser)
def AddIcemaker(builder, icemaker): builder.PrependInt32Slot(1, icemaker, 0)
def CONTENTAddIcemaker(builder, icemaker):
    """This method is deprecated. Please switch to AddIcemaker."""
    return AddIcemaker(builder, icemaker)
def AddLightbulb(builder, lightbulb): builder.PrependInt8Slot(2, lightbulb, 0)
def CONTENTAddLightbulb(builder, lightbulb):
    """This method is deprecated. Please switch to AddLightbulb."""
    return AddLightbulb(builder, lightbulb)
def AddFridgeTemp(builder, fridgeTemp): builder.PrependInt32Slot(3, fridgeTemp, 32)
def CONTENTAddFridgeTemp(builder, fridgeTemp):
    """This method is deprecated. Please switch to AddFridgeTemp."""
    return AddFridgeTemp(builder, fridgeTemp)
def AddFreezeTemp(builder, freezeTemp): builder.PrependInt32Slot(4, freezeTemp, 0)
def CONTENTAddFreezeTemp(builder, freezeTemp):
    """This method is deprecated. Please switch to AddFreezeTemp."""
    return AddFreezeTemp(builder, freezeTemp)
def AddSensorStatus(builder, sensorStatus): builder.PrependInt8Slot(5, sensorStatus, 0)
def CONTENTAddSensorStatus(builder, sensorStatus):
    """This method is deprecated. Please switch to AddSensorStatus."""
    return AddSensorStatus(builder, sensorStatus)
def End(builder): return builder.EndObject()
def CONTENTEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)