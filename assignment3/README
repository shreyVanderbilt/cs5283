This directory contains code to automate the orchestration of Mininet
topologies from a specified YAML file. The YAML file in essence serves as
a declarative specification based on a domain-specific language (DSL).
Although, as of now, we do not have any concrete and formal specification
of the DSL, its structure/syntax/semantics should hopefully be clear from
the example YAML files in this directory.

Of specific interest to the Computer Networks class are the triangle_topo.yaml
and hw1prob5_topo.yaml files.   We assume that you already have the vxlan0
setup with the VM1's endpoint being 192.168.100.1 and VM2's endpoint
being 192.168.100.2.

The triangle topology has 3 routers: r1, r2 and r3. r1 has two LANs: 10.10.1.0/24
and 10.10.2.0/24; r2 has LAN 10.20.1.0/24; and r3 has LAN: 10.30.1.0/24.

The hw1prob5 topology is as specified in the HW1 writeup. It has 7 routers with
LANs as follows:
P: 172.16.3.0/24, 172.16.5.0/24 and a specially created LAN to connect to NAT node
Q: 192.168.10.0/24
R: 172.12.0.0/16
S: intermediate router
T: intermediate router
U: 10.85.8.0/24 and 10.85.10.0/24
V: 10.100.0.0/16

We use special naming conventions where we add prefix lan1, lan2 ... before
host numbers h1, h2, .... Thus, P has LANs lan1, lan2, lan3. The same logic
also applies to the triangle topology. Please issue the "net", "nodes" and "dump"
commands on the Mininet prompt to see the details of the topologies.

To get your networks and routing rules setup, run the following commands:

On VM1:

sudo python3 custom_net.py -y triangle_topo.yaml

On VM2:

sudo python3 custom_net.py -y hw1prob5_topo.yaml

You can try pinging from one mininet to other. For example, you
can try on Mininet 1,

lan1h1 ping 10.85.8.2

or

from VM2 Mininet,

lan7h2 ping 10.20.1.3

or some such combinations.

You can then use these topologies for your PA3.

