############## Dictionary of a topology ##########
#
# My aim is that this will get generated via some DSML
# such as the one we can create in our model-driven
# engineering environment called WebGME (www.webgme.org)
# and so will generate information that is correct-by-construction.
# Right now, because it is being created manually, mistakes can still
# be made. For this triangle topology, things appear to work correctly.
#
#######################################
#
# Think of this YAML schema as the domain-specific language
# in which the topology is described. Thereafter, it is fed to a
# generic back-end orchestration middleware, which generates
# the desired topology.
#
topo:
  routers:
    - router: "r1"
      ip: "10.10.1.1/24"
      
    - router: "r2"
      ip: "10.20.1.1/24"

    - router: "r3"
      ip: "10.30.1.1/24"

  lans:  # We will assume interfaces numbered from 0 per LAN
            # We will use lan name as prefix of switches and hosts
    - name: "lan1"
      router: "r1"
      subnet: "10.10.1.0/24"
      hosts: 3

    - name: "lan2"
      router: "r1"
      subnet: "10.10.2.0/24"
      hosts: 2

    - name: "lan3"
      router: "r2"
      subnet: "10.20.1.0/24"
      hosts: 2

    - name: "lan4"
      router: "r3"
      subnet: "10.30.1.0/24"
      hosts: 2       # We could or could not have hosts here
      nat: nat0     # This LAN has a nat node, providing a way outside

  nats:   # All the NATs listed in the LAN specs
    - name: "nat0"
      subnets:  # Additional subnets who need NAT beyond the home LAN
        - "10.10.1.0/24"
        - "10.10.2.0/24"
        - "10.20.1.0/24"
#        - "10.30.1.0/24"   # already is the home LAN


  links:  # these are the router to router links where we just use the first addr
            # to the first endpoint and second to the second endpoint
            #
            # ep = end point. I didn't want to call it source and destination
    - ep1-router: "r1"
      ep2-router: "r2"
      subnet: "10.50.1.0/24"
      
    - ep1-router: "r1"
      ep2-router: "r3"
      subnet: "10.100.1.0/24"
      
    - ep1-router: "r2"
      ep2-router: "r3"
      subnet: "10.150.1.0/24"
      
  routes:  # routes that are not automatically created
    - router: "r1"
      entries:
        - "default via 10.100.1.2 dev r1-eth3"  # toward r3 and out
        - "10.20.1.0/24 via 10.50.1.2 dev r1-eth2"  # LANs of r2
        - "10.30.1.0/24 via 10.100.1.2 dev r1-eth3"  # LANs of r3

    - router: "r2"
      entries:
        - "default via 10.150.1.2 dev r2-eth2"   # toward r3 and out
        - "10.10.0.0/22 via 10.50.1.1 dev r2-eth1" # LANS of r1
        - "10.30.1.0/24 via 10.150.1.2 dev r2-eth2"  # LANs of r3

    - router: "r3"
      entries:
        - "default via 10.30.1.2 dev r3-eth0"  # toward nat node
        - "10.10.0.0/22 via 10.100.1.1 dev r3-eth1"  # LANs of r1
        - "10.20.1.0/24 via 10.150.1.1 dev r3-eth2"  # LANs of r2

    - router: "nat0"
      entries:   # these entries are so that the NAT can allow traffic from outside and
                     # route it correctly to the correct LAN.   We do not provide
                     # the route into its own LAN as it is auto generated
        - "10.10.0.0/22 via 10.30.1.1 dev nat0-eth0"  # LANs of r1
        - "10.20.1.0/24 via 10.30.1.1 dev nat0-eth0"  # LANs of r1
        # supply the VxLAN rule here as additional entry
        # Here we add all the LANs that we wish to reach in the
        # HW1Prob5 topology running on VM2
        - "172.16.0.0/21 via 192.168.100.2 dev vxlan0"  # P's LANs
        - "192.168.10.0/24 via 192.168.100.2 dev vxlan0" # Q's LAN
        - "172.12.0.0/16 via 192.168.100.2 dev vxlan0"  # R's LAN
        - "10.85.8.0/22 via 192.168.100.2 dev vxlan0" # U's LAN
        - "10.100.0.0/16 via 192.168.100.2 dev vxlan0" # V's LAN
      
